start: expr*
      | statement*
      | block*
      | args*


?statement: "print" "(" expr ")" SEMICOLON  -> print_statement
          | "input" "(" expr ")" ";"  -> input_statement
          | NAME "=" expr ";"      -> assign_var
          | NAME "=" "input" "(" expr ")" ";" -> var_input_statement
          | "if" expr "==" expr  block  -> if_statement
          | "if" expr "==" expr block "else" block -> if_else_statement
          | "if" expr "==" expr "or" expr "==" expr block -> or_if_statement
          | "while" expr block     -> while_loop
          | "while" expr "==" expr block  -> conditional_loop
          | "for" NAME "in" expr          -> for_loop
          | "function" NAME "(" ")" block -> no_argument_function
          | "function" NAME "(" args ")" block   -> argument_function
          | NAME "(" ")" ";"              -> no_argument_call_function
          | "exit" "(" ")" ";"            -> exit_statement
          | "exit" "(" expr ")" ";"       -> exit_statement
          | "wait" "(" expr ")" ";"       -> wait


?expr: STRING            -> string
     | NUMBER            -> number
     | "[" [expr ("," expr)*] "]" -> array
     | NUMBER "+" NUMBER -> add
     | NUMBER "-" NUMBER -> sub
     | NUMBER "*" NUMBER -> mul
     | NUMBER "/" NUMBER -> div
     | STRING "+" STRING -> str_add
     | NAME              -> get_var
     | NAME "+" NAME     -> var_add
     | NAME "-" NAME     -> var_sub
     | NAME "*" NAME     -> var_mul
     | NAME "/" NAME     -> var_div
     | "true"            -> true
     | "false"           -> false
     | "sum" "(" expr ")"  -> sum_expr
     | "random_integer" "(" expr "," expr ")"  -> random_integer
     | "read_file" "(" expr ")"   -> read_file
     | "doc" "(" expr ")"            -> doc
     | NAME "[" NUMBER "]"          -> array_index
     | "mean" "(" expr ")"          -> mean
     | "square_root" "(" NUMBER ")"   -> square_root
     | "path_exists" "(" expr ")"     -> path_exists
     | "range" "(" expr ")"           -> range

block: "{" expr+ "}"
     | "{" statement+ "}"

args: NAME+

SEMICOLON: ";"

%import common.ESCAPED_STRING -> STRING 
%import common.NUMBER
%import common.CNAME -> NAME
%declare _INDENT _DEDENT
%import common.WS_INLINE
%ignore WS_INLINE
%import common.NEWLINE -> _NL
%ignore _NL
%ignore "//" /[^\n]*/
