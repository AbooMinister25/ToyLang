?start: expr*
      | statement* -> statement


?statement: "print" "(" expr ")" ";"  -> print_statement
          | "input" "(" expr ")" ";"  -> input_statement
          | NAME "=" expr ";"      -> assign_var
          | NAME "=" "input" "(" expr ")" ";" -> var_input_statement
          | "if" expr "==" expr "{" statement+ "}" -> if_statement
          | "if" expr "==" expr "{" expr+ "}" -> if_statement
          | "if" expr "==" expr "{" statement+ "}" "else" "{" statement+ "}" -> if_else_statement
          | "if" expr "==" expr "{" expr+ "}" "else" "{" statement+ "}" -> if_else_statement

?expr: STRING            -> string
     | NUMBER            -> number
     | NUMBER "+" NUMBER -> add
     | NUMBER "-" NUMBER -> sub
     | NUMBER "*" NUMBER -> mul
     | NUMBER "/" NUMBER -> div
     | STRING "+" STRING -> str_add
     | NAME              -> get_var
     | NAME "+" NAME     -> var_add

%import common.ESCAPED_STRING -> STRING 
%import common.NUMBER
%import common.CNAME -> NAME
%declare _INDENT _DEDENT
%import common.WS_INLINE
%ignore WS_INLINE
%import common.NEWLINE -> _NL
%ignore _NL

