start: expr*
      | statement*
      | block*


?statement: "print" "(" expr ")" ";"  -> print_statement
          | "input" "(" expr ")" ";"  -> input_statement
          | NAME "=" expr ";"      -> assign_var
          | NAME "=" "input" "(" expr ")" ";" -> var_input_statement
          | "if" expr "==" expr  block  -> if_statement
          | "if" expr "==" expr block "else" block -> if_else_statement
          | "while" expr block     -> while_loop
          | "while" expr "==" expr block  -> conditional_loop
          | "function" NAME "(" ")" block -> no_argument_function
          | NAME "(" ")"                  -> no_argument_call_function


?expr: STRING            -> string
     | NUMBER            -> number
     | NUMBER "+" NUMBER -> add
     | NUMBER "-" NUMBER -> sub
     | NUMBER "*" NUMBER -> mul
     | NUMBER "/" NUMBER -> div
     | STRING "+" STRING -> str_add
     | NAME              -> get_var
     | NAME "+" NAME     -> var_add
     | NAME "-" NAME     -> var_sub
     | NAME "*" NAME     -> var_mul
     | NAME "/" NAME     -> var_div
     | "true"            -> true
     | "false"           -> false

block: "{" expr+ "}"
     | "{" statement+ "}"

%import common.ESCAPED_STRING -> STRING 
%import common.NUMBER
%import common.CNAME -> NAME
%declare _INDENT _DEDENT
%import common.WS_INLINE
%ignore WS_INLINE
%import common.NEWLINE -> _NL
%ignore _NL

