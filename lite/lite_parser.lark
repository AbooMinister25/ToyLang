?start: expr
      | statement* -> statement
      | bool
      | condition
      | if*

?expr: STRING            -> string
     | NUMBER            -> number
     | NUMBER "+" NUMBER -> add
     | NUMBER "-" NUMBER -> sub
     | NUMBER "*" NUMBER -> mul
     | NUMBER "/" NUMBER -> div
     | STRING "+" STRING -> str_add
     | NAME              -> get_var

?bool: TRUE              -> true
     | FALSE             -> false

?condition: expr "==" bool -> bool_comparison
          | expr "==" expr -> expr_comparison

?statement: "print" "(" expr ")" ";"  -> print_statement
          | "input" "(" expr ")" ";"  -> input_statement
          | NAME "=" "input" "(" expr ")" ";" -> var_input_statement
          | NAME "=" "input" "(" expr ")" ";" -> var_input_statement
          | NAME "=" expr ";"      -> assign_var

?if : "if" condition "{" statement+ "}" -> if_statement
    | "if" condition "{" expr+ "}" -> if_statement
    | "if" condition "{" statement+ "}" "else" "{" statement+ "}" -> if_else_statement


TRUE: "true"
FALSE: "false"


%import common.ESCAPED_STRING -> STRING 
%import common.NUMBER
%import common.CNAME -> NAME
%declare _INDENT _DEDENT
%import common.WS_INLINE
%ignore WS_INLINE
%import common.NEWLINE -> _NL
%ignore _NL